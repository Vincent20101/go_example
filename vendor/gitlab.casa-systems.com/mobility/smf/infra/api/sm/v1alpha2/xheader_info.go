package v1alpha2

type HttpFieldType string

const (
	HttpFieldApn             HttpFieldType = "apn"
	HttpFieldImei            HttpFieldType = "imei"
	HttpFieldImsi            HttpFieldType = "imsi"
	HttpFieldRat             HttpFieldType = "rat"
	HttpFieldMsisdn          HttpFieldType = "msisdn"
	HttpFieldNai             HttpFieldType = "nai"
	HttpFieldUeIp            HttpFieldType = "ue_ip"
	HttpFieldUpfIp           HttpFieldType = "upf_ip"
	HttpFieldUli             HttpFieldType = "uli"
	HttpFieldDynamicalCtxt   HttpFieldType = "nonce"
	HttpFieldPolicyBandwidth HttpFieldType = "bandwidth"
	HttpFieldRefresh         HttpFieldType = "refresh"
	HttpFieldTimestamp       HttpFieldType = "timestamp"
	HttpFieldSgsnAddress     HttpFieldType = "sgsn_address"
	HttpFieldMccMnc          HttpFieldType = "mcc_mnc"
)

// A triple tuple <Tag, Val, NeedTag> is used to model a http field
type HttpField struct {
	// an identifier for an http field name
	// Mandatory
	Tag HttpFieldType `mapstructure:"tag" json:"tag"`
	// a string for an http field value
	// a non-empty value will be copied for "static" fields; o.w, will be populated by SMF for dynamic fields
	// Default value ""
	// Optional
	Val string `mapstructure:"val" json:"val,omitempty"`
	// a flag indicates whether the tag of an http field should be included in an http header with the value or not
	// false: only the Val will be included in an http header
	// true: Tag=Val will be included in an http header
	// Default value "false"
	// Optional
	NeedTag bool `mapstructure:"needTag" json:"needTag,omitempty"`
}

type HttpFields []HttpField

type HeaderField struct {
	// an identifier for a header field name
	// Mandatory
	HeaderFieldName string `mapstructure:"headerFieldName" json:"headerFieldName"`
	// a list of header fields defining the header field value
	// Mandatory
	HeaderFieldValue HttpFields `mapstructure:"headerFieldValue" json:"headerFieldValue"`
}

type HeaderEnrichmentConfig map[string]HttpFields

type HeaderFieldConfig map[string]HeaderField

type BearerFieldMaskType string

const (
	BearerFieldMaskApn       BearerFieldMaskType = "apn"
	BearerFieldMaskImei      BearerFieldMaskType = "imei"
	BearerFieldMaskImsi      BearerFieldMaskType = "imsi"
	BearerFieldMaskRatType   BearerFieldMaskType = "rat-type" // Deprecated
	BearerFieldMaskQos       BearerFieldMaskType = "qos"      // Deprecated
	BearerFieldMaskMdn       BearerFieldMaskType = "mdn"      // Deprecated
	BearerFieldMaskMsisdn    BearerFieldMaskType = "msisdn"
	BearerFieldMaskNai       BearerFieldMaskType = "nai"
	BearerFieldMaskUeIp      BearerFieldMaskType = "ue_ip"
	BearerFieldMaskUpfIp     BearerFieldMaskType = "upf_ip"
	BearerFieldMaskUli       BearerFieldMaskType = "uli"
	BearerFieldMaskTimestamp BearerFieldMaskType = "timestamp"
	BearerFieldMaskRat       BearerFieldMaskType = "rat"
)

type xHeaderActionType string

const (
	XHeaderActionEncryption xHeaderActionType = "ENCRYPTION"
	XHeaderActionValidation xHeaderActionType = "VALIDATION"
	XHeaderActionNone       xHeaderActionType = "NONE"
)

type HTTPMsgType string

const (
	HTTPMsgPost = "POST"
	HTTPMsgGet  = "GET"
	HTTPMsgRsp  = "RSP"
)

type PolicyFieldMaskType string

const (
	policyFieldMaskResolution PolicyFieldMaskType = "resolution"
)

type ValidationActionType string

const (
	ValidationActionRemoveThrottling ValidationActionType = "remove-throttling"
)

// XHeaderInfo
//
//	Purpose:
//	  Defines fields required to create XHeader Value to be sent in FAR for header enrichment
//
//	Data model:
//	 Refer to the description for each attribute below
//
//	Usage:
//	  Configured under StaticPcc as a map and referenced by XHeaderRef under PccRule
type XHeaderInfo struct {
	// Identifier for this xHeaderInfo.
	// This field will not be exposed to the user, will be generated by the map key when controller reconciles map.
	// Optional
	XHeaderInfoId string `mapstructure:"xHeaderInfoId" json:"xHeaderInfoId,omitempty"`
	// HTTP Message Type Mask
	// POST, GET, RSP
	// Optional
	HTTPMsgTypeMask HTTPMsgType `mapstructure:"httpMsgTypeMask" json:"httpMsgTypeMask,omitempty"`
	// Bearer Field Mask
	// apn, imei, imsi, msisdn, nai, ue_ip, upf_ip, uli, timestamp, rat
	// rat-type, qos, mdn are deprecated, use rat, msisdn instead
	// Optional
	BearerFieldMask BearerFieldMaskType `mapstructure:"bearerFieldMask" json:"bearerFieldMask,omitempty"`
	// Policy Field Mask
	// "resolution", other fields to be determined
	// Optional
	PolicyFieldMask string `mapstructure:"policyFieldMask" json:"policyFieldMask,omitempty"`
	// StaticField for X-Header
	// "refresh=300" or any meaningful action string
	// Optional
	StaticField string `mapstructure:"staticField" json:"staticField,omitempty"`
	// DynamicContext for X-Header
	// nonce , pduSessId and/or unique
	// Optional
	DynamicContext string `mapstructure:"dynamicContext" json:"dynamicContext,omitempty"`
	// XHeader Action
	// Could be ENCRYPTION, VALIDATION or NONE
	// Encryption and validation are mutually exclusive.
	// Optional
	XHeaderAction xHeaderActionType `mapstructure:"xHeaderAction" json:"xHeaderAction,omitempty"`
	// Validation Action for application provider
	// Optional
	ValidationAction ValidationActionType `mapstructure:"validationAction" json:"validationAction,omitempty"`
}
