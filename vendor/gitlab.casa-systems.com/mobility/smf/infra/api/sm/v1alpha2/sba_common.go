/* Adapted from: TS 29.571 version Sep, 2019
 * NRF NFDiscovery Service
 *
 * NRF NFDiscovery  Service
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package v1alpha2

import "time"

type AccessType string

// List of AccessType
const (
	_3_GPP_ACCESS    AccessType = "3GPP_ACCESS"
	NON_3_GPP_ACCESS AccessType = "NON_3GPP_ACCESS"
)

// Plmn Identity
//
//	Purpose:
//	  This is default Plmn Identity configuration
//
//	Data model:
//	   Please refer https://www.3gpp.org/ftp/Specs/archive/29_series/29.571/29571-g30.zip section 5.4.4.3 for details
//
//	Usage:
//	  Used as value of PlmnId
type PlmnId struct {
	// Mobile Country Code.\n
	// Please refer https://www.3gpp.org/ftp/Specs/archive/29_series/29.571/29571-g30.zip Table 5.4.2-1 Mcc.\n
	// Mandatory.
	Mcc string `mapstructure:"mcc" json:"mcc"`
	// Mobile Network Code.\n
	// Please refer https://www.3gpp.org/ftp/Specs/archive/29_series/29.571/29571-g30.zip Table 5.4.2-1 Mnc.\n
	// Mandatory.
	Mnc string `mapstructure:"mnc" json:"mnc"`
}

// Tracking Area Identity configuration
//
//	Purpose:
//	  This is default Tracking Area Identity configuration
//
//	Data model:
//	  Tracking Area Identity (please refer https://www.3gpp.org/ftp//Specs/archive/29_series/29.571/29571-g20.zip section 5.4.4.4).
//
//	Usage:
//	  Used as value of Tai
type Tai struct {
	// PLMN Identity
	// (please refer https://www.3gpp.org/ftp//Specs/archive/29_series/29.571/29571-g20.zip section 5.4.4.3).
	// Mandatory.
	PlmnId PlmnId `mapstructure:"plmnId" json:"plmnId"`
	// Tracking Area Code
	// (please refer https://www.3gpp.org/ftp//Specs/archive/29_series/29.571/29571-g20.zip section 5.4.2).
	// Mandatory.
	Tac string `mapstructure:"tac" json:"tac"`
}

type Range struct {
	// First value identifying the start of a range.
	Start string `mapstructure:"start" json:"start,omitempty"`
	// Last value identifying the end of a range.
	End string `mapstructure:"end" json:"end,omitempty"`
	// Pattern (regular expression according to the ECMA-262 dialect [8]) representing the set of item belonging to this range.
	Pattern string `mapstructure:"pattern" json:"pattern,omitempty"`
}

// Tracking Area Identity Range configuration
//
//	Purpose:
//	  This is default Tracking Area Identity Range configuration
//
//	Data model:
//	  Refer to the description for each attribute below
//
//	Usage:
//	  Used as value of TaiRangeList
type TaiRange struct {
	// PLMN ID related to the TacRange.
	// (please refer https://www.3gpp.org/ftp//Specs/archive/29_series/29.571/29571-g20.zip section 5.4.4.3).
	// Mandatory.
	PlmnId PlmnId `mapstructure:"plmnId" json:"plmnId"`
	// The range of the TACs. Either the start and end attributes, or the pattern attribute, shall be present.
	// Mandatory.
	TacRangeList []TacRange `mapstructure:"tacRangeList" json:"tacRangeList"`
}

// Snssai configuration
//
//	Purpose:
//	  This is default Snssai configuration
//
//	Data model:
//	  please refer https://www.3gpp.org/ftp//Specs/archive/29_series/29.571/29571-g20.zip section 5.4.4.2)
//
//	Usage:
//	  Used as value of SNssai
type Snssai struct {
	// Unsigned integer, within the range 0 to 255, representing the Slice/Service Type. It indicates the expected Network Slice behaviour in terms of features and services. Values 0 to 127 correspond to the standardized SST range. Values 128 to 255 correspond to the Operator-specific range.\n
	// Mandatory.
	Sst int32 `mapstructure:"sst" json:"sst"`
	// 3-octet string, representing the Slice Differentiator, in hexadecimal representation. Each character in the string shall take a value of "0" to "9" or "A" to "F" and shall represent 4 bits. The most significant character representing the 4 most significant bits of the SD shall appear first in the string, and the character representing the 4 least significant bit of the SD shall appear last in the string. This is an optional parameter that complements the Slice/Service type(s) to allow to differentiate amongst multiple Network Slices of the same Slice/Service type. Pattern: '^[A-Fa-f0-9]{6}$'\n
	// Optional.
	Sd string `mapstructure:"sd" json:"sd,omitempty"`
}

/*
Table 5.4.3.3-1: Enumeration PduSessionType
Enumeration value	Description
"IPV4"	IPv4
"IPV6"	IPv6
"IPV4V6"	IPv4v6 (see clause 5.8.2.2.1 of 3GPP TS 23.501 [8])
"UNSTRUCTURED"	Unstructured
"ETHERNET"	Ethernet
*/
type PduSessionType string

const (
	PduSessionType_IPV4V6 PduSessionType = "IPV4V6"
	PduSessionType_IPV4   PduSessionType = "IPV4"
	PduSessionType_IPV6   PduSessionType = "IPV6"
	PduSessionType_UNSTR  PduSessionType = "UNSTRUCTURED"
	PduSessionType_ETHER  PduSessionType = "ETHERNET"
)

/*
Ipv4Addr:

	type: string
	pattern: '^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'
	example: '198.51.100.1'
*/
type Ipv4Addr string

/*
Ipv6Addr:

	type: string
	allOf:
	  - pattern: '^((:|(0?|([1-9a-f][0-9a-f]{0,3}))):)((0?|([1-9a-f][0-9a-f]{0,3})):){0,6}(:|(0?|([1-9a-f][0-9a-f]{0,3})))$'
	  - pattern: '^((([^:]+:){7}([^:]+))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?))$'
	example: '2001:db8:85a3::8a2e:370:7334'
*/
type Ipv6Addr string

/*
   Ipv6Prefix:
     type: string
     allOf:
       - pattern: '^((:|(0?|([1-9a-f][0-9a-f]{0,3}))):)((0?|([1-9a-f][0-9a-f]{0,3})):){0,6}(:|(0?|([1-9a-f][0-9a-f]{0,3})))(\/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))$'
       - pattern: '^((([^:]+:){7}([^:]+))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?))(\/.+)$'
     only supports the prefix 64 bits for IPv6 now.
     example: '2001:db8:abcd:12::0/64'*/

type Ipv6Prefix string

// Ipv4 Address Range
//
//	Purpose:
//	  Defines list of ranges of IPv4 addresses handled by UPF
//
//	Data model:
//	  Please refer https://www.3gpp.org/ftp/Specs/archive/29_series/29.510/29510-g30.zip section 6.1.6.2.22 for details.\n
//
//	Usage:
//	  Configured under DnnUpfInfoItem as a slice and referenced by SnssaiUpfInfoItem
type Ipv4AddressRange struct {
	// First value identifying the start of an IPv4 address range.\n
	// pattern: '^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'.\n
	// example: '198.51.100.1'.\n
	// Mandatory.
	Start Ipv4Addr `mapstructure:"start" json:"start"`
	// Last value identifying the end of an IPv4 address range.\n
	// pattern: '^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'.\n
	// example: '198.51.100.1'.\n
	// Mandatory.
	End Ipv4Addr `mapstructure:"end" json:"end"`
}

// Ipv6 Prefix Range
//
//	Purpose:
//	  Defines list of ranges of IPv6 prefixes handled by the UPF
//
//	Data model:
//	  Please refer https://www.3gpp.org/ftp/Specs/archive/29_series/29.510/29510-g30.zip section 6.1.6.2.23 for details.\n
//
//	Usage:
//	  Configured under DnnUpfInfoItem as a slice and referenced by SnssaiUpfInfoItem
type Ipv6PrefixRange struct {
	// First value identifying the start of an IPv6 prefix range.\n
	// Only supports the prefix 64 bits for IPv6 now.\n
	// - pattern: '^((:|(0?|([1-9a-f][0-9a-f]{0,3}))):)((0?|([1-9a-f][0-9a-f]{0,3})):){0,6}(:|(0?|([1-9a-f][0-9a-f]{0,3})))(\/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))$'.\n
	// - pattern: '^((([^:]+:){7}([^:]+))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?))(\/.+)$'.\n
	// example: '2001:db8:abcd:12::0/64'.\n
	// Mandatory.
	Start Ipv6Prefix `mapstructure:"start" json:"start"`
	// Last value identifying the end of an IPv6 prefix range.\n
	// Only supports the prefix 64 bits for IPv6 now.\n
	// - pattern: '^((:|(0?|([1-9a-f][0-9a-f]{0,3}))):)((0?|([1-9a-f][0-9a-f]{0,3})):){0,6}(:|(0?|([1-9a-f][0-9a-f]{0,3})))(\/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))$'.\n
	// - pattern: '^((([^:]+:){7}([^:]+))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?))(\/.+)$'.\n
	// example: '2001:db8:abcd:12::0/64'.\n
	// Mandatory.
	End Ipv6Prefix `mapstructure:"end" json:"end"`
}

type Fqdn string

// First value identifying the start of a SUPI range, to be used when the range of SUPI's can be represented as a numeric range (e.g., IMSI ranges). This string shall consist only of digits.  Pattern: "^[0-9]+$"
// Last value identifying the end of a SUPI range, to be used when the range of SUPI's can be represented as a numeric range (e.g. IMSI ranges). This string shall consist only of digits. Pattern: "^[0-9]+$"
// Pattern (regular expression according to the ECMA-262 dialect [8]) representing the set of SUPI's belonging to this range. A SUPI value is considered part of the range if and only if the SUPI string fully matches the regular expression.
// EXAMPLE :	IMSI range. From: 123 45 6789040000 To: 123 45 6789049999 (i.e., 10,000 IMSI numbers).  `JSON: { "pattern": "^imsi-12345678904[0-9]{4}$" }`, or `JSON: { "start": "123456789040000",  "end": "123456789049999" }`
type SupiRange Range

// First value identifying the start of an identity range, to be used when the range of identities can be represented as a numeric range (e.g., MSISDN ranges). This string shall consist only of digits. Pattern: "^[0-9]+$"
// Last value identifying the end of an identity range, to be used when the range of identities can be represented as a numeric range (e.g. MSISDN ranges). This string shall consist only of digits. Pattern: "^[0-9]+$"
// Pattern (regular expression according to the ECMA-262 dialect [8]) representing the set of identities belonging to this range. An identity value is considered part of the range if and only if the identity string fully matches the regular expression. To be used when identity is External Identifier or External Group Identifier or MSISDN.
type IdentityRange Range

// First value identifying the start of a PLMN range. The string shall be encoded as follows:<MCC><MNC> ; Pattern: '^[0-9]{3}[0-9]{2,3}$'
// Last value identifying the end of a PLMN range. The string shall be encoded as follows: <MCC><MNC> ; Pattern: '^[0-9]{3}[0-9]{2,3}$'
// Pattern (regular expression according to the ECMA-262 dialect [8]) representing the set of PLMNs belonging to this range. A PLMN value is considered part of the range if and only if the PLMN string (formatted as <MCC><MNC>) fully matches the regular expression.
type PlmnRange Range

// First value identifying the start of a TAC range, to be used when the range of TAC's can be represented as a hexadecimal range (e.g., TAC ranges). 3-octet string identifying a tracking area code, each character in the string shall take a value of "0" to "9" or "A" to "F" and shall represent 4 bits. The most significant character representing the 4 most significant bits of the TAC shall appear first in the string, and the character representing the 4 least significant bit of the TAC shall appear last in the string. Pattern: "^([A-Fa-f0-9]{4}|[A-Fa-f0-9]{6}$)"
// Last value identifying the end of a TAC range, to be used when the range of TAC's can be represented as a hexadecimal range (e.g. TAC ranges). 3-octet string identifying a tracking area code, each character in the string shall take a value of "0" to "9" or "A" to "F" and shall represent 4 bits. The most significant character representing the 4 most significant bits of the TAC shall appear first in the string, and the character representing the 4 least significant bit of the TAC shall appear last in the string. Pattern: "^([A-Fa-f0-9]{4}|[A-Fa-f0-9]{6})$"
// Pattern (regular expression according to the ECMA-262 dialect [8]) representing the set of TAC's belonging to this range. A TAC value is considered part of the range if and only if the TAC string fully matches the regular expression.
type TacRange Range

type NfType string

const (
	NfType_NRF    NfType = "NRF"
	NfType_UDM    NfType = "UDM"
	NfType_AMF    NfType = "AMF"
	NfType_SMF    NfType = "SMF"
	NfType_AUSF   NfType = "AUSF"
	NfType_NEF    NfType = "NEF"
	NfType_PCF    NfType = "PCF"
	NfType_SMSF   NfType = "SMSF"
	NfType_NSSF   NfType = "NSSF"
	NfType_UDR    NfType = "UDR"
	NfType_LMF    NfType = "LMF"
	NfType_GMLC   NfType = "GMLC"
	NfType_5G_EIR NfType = "5G_EIR"
	NfType_SEPP   NfType = "SEPP"
	NfType_UPF    NfType = "UPF"
	NfType_N3IWF  NfType = "N3IWF"
	NfType_AF     NfType = "AF"
	NfType_UDSF   NfType = "UDSF"
	NfType_BSF    NfType = "BSF"
	NfType_CHF    NfType = "CHF"
	NfType_NWDAF  NfType = "NWDAF"
	NfType_PCSCF  NfType = "PCSCF"
	NfType_SCP    NfType = "SCP"
)

type NfStatus string

const (
	NfStatus_REGISTERED NfStatus = "REGISTERED"
	NfStatus_SUSPENDED  NfStatus = "SUSPENDED"
)

type NfSetId string

type TransportProtocol = string

const (
	TransportProtocol_TCP TransportProtocol = "TCP"
)

type Guami struct {
	// PLMN Identity
	PlmnId PlmnId `mapstructure:"plmnId" json:"plmnId"`
	// AMF Identity
	AmfId string `mapstructure:"amfId" json:"amfId"`
}

type Ecgi struct {
	// PLMN Identity
	PlmnId PlmnId `mapstructure:"plmnId" json:"plmnId"`
	// E-UTRA Cell Identity
	EutraCellId string `mapstructure:"eutraCellId" json:"eutraCellId"`
}

type GlobalRanNodeId struct {
	// Indicates the identity of the PLMN that the RAN node belongs to.
	PlmnId PlmnId `mapstructure:"plmnId" json:"plmnId"`
	// This IE shall be included if the RAN node belongs to non 3GPP access (i.e a N3IWF).
	N3IwfId string `mapstructure:"n3IwfId" json:"n3IwfId,omitempty"`
	// This IE shall be included if the RAN Node Id represents a gNB. When present, this IE shall contain the identifier of the gNB.
	GNbId *GNbId `mapstructure:"gNbId" json:"gNbId,omitempty"`
	// This IE shall be included if the RAN Node Id represents a NG-eNB. When present, this IE shall contain the identifier of an NG-eNB.
	GgeNbId string `mapstructure:"ngeNbId" json:"ngeNbId,omitempty"`
}

type GNbId struct {
	// Unsigned integer representing the bit length of the gNB ID as defined in clause 9.3.1.6 of 3GPP TS 38.413 [11], within the range 22 to 32
	BitLength int32 `mapstructure:"bitLength" json:"bitLength"`
	// This represents the identifier of the gNB. The string shall be formatted with following pattern: '^[A-Fa-f0-9]{6,8}$'
	// The value of the gNB ID shall be encoded in hexadecimal representation. Each character in the string shall take a value of "0" to "9" or "A" to "F" and shall represent 4 bits. The padding 0 shall be added to make multiple nibbles, the most significant character representing the padding 0 if required together with the 4 most significant bits of the gNB ID shall appear first in the string, and the character representing the 4 least significant bit of the gNB ID shall appear last in the string.
	// Examples: A 30 bit value "382A3F47" indicates a gNB ID with value 0x382A3F47; A 22 bit value "2A3F47" indicates a gNB ID with value 0x2A3F47;
	GNBValue string `mapstructure:"gNBValue" json:"gNBValue"`
}

type Ncgi struct {
	// PLMN Identity
	PlmnId PlmnId `mapstructure:"plmnId"  json:"plmnId"`
	// NR Cell Identity
	NrCellId string `mapstructure:"nrCellId"  json:"nrCellId"`
}

type NrLocation struct {
	// Tracking Area Identity
	Tai Tai `mapstructure:"tai" json:"tai"`
	// NR Cell Identity
	Ncgi Ncgi `mapstructure:"ncgi" json:"ncgi"`
	// The value represents the elapsed time in minutes since the last network contact of the mobile station. Value "0" indicates that the location information was obtained after a successful paging procedure for Active Location Retrieval when the UE is in idle mode or after a successful NG-RAN location reporting procedure with the gNB when the UE is in connected mode. Any other value than "0" indicates that the location information is the last known one. See 3GPP TS 29.002 [21] clause 17.7.8.
	AgeOfLocationInformation *int32 `mapstructure:"ageOfLocationInformation" json:"ageOfLocationInformation,omitempty"`
	// The value represents the UTC time when the UeLocation information was acquired.
	UeLocationTimestamp string `mapstructure:"ueLocationTimestamp" json:"ueLocationTimestamp,omitempty"`
	// Refer to geographical Information. See 3GPP TS 23.032 [23] clause 7.3.2. Only the description of an ellipsoid point with uncertainty circle is allowed to be used. Allowed characters are 0-9 and A-F;
	GeographicalInformation string `mapstructure:"geographicalInformation" json:"geographicalInformation,omitempty"`
	// Refers to Calling Geodetic Location. See ITU-T Recommendation Q.763 (1999) [24] clause 3.88.2. Only the description of an ellipsoid point with uncertainty circle is allowed to be used. Allowed characters are 0-9 and A-F.
	GeodeticInformation string `mapstructure:"geodeticInformation" json:"geodeticInformation,omitempty"`
	// It indicates the global identity of the gNodeB in which the UE is currently located. See 3GPP TS 38.413 [11] clause 9.3.1.6.
	GlobalGnbId *GlobalRanNodeId `mapstructure:"globalGnbId" json:"globalGnbId,omitempty"`
}

type N3gaLocation struct {
	// The unique non 3GPP TAI used in the PLMN. It shall be present over the 3GPP PLMN internal interfaces, but shall not be present over the N5 interface.
	N3gppTai *Tai `mapstructure:"n3gppTai" json:"n3gppTai,omitempty"`
	// This IE shall contain the N3IWF identifier received over NGAP and shall be encoded as a string of hexadecimal characters.
	// Pattern: '^[A-Fa-f0-9]+$'
	// It shall be present over the 3GPP PLMN internal interfaces, but shall not be present over the N5 interface.
	N3IwfId string `mapstructure:"n3IwfId" json:"n3IwfId,omitempty"`
	// 	UE local IPv4 address (used to reach the N3IWF). The ueIPv4Addr or the ueIPv6Addr shall be present.
	UeIpv4Addr string `mapstructure:"ueIpv4Addr" json:"ueIpv4Addr,omitempty"`
	// 	UE local IPv6 address (used to reach the N3IWF). The ueIPv4Addr or the ueIPv6Addr shall be present.
	UeIpv6Addr string `mapstructure:"ueIpv6Addr" json:"ueIpv6Addr,omitempty"`
	// UDP or TCP source port number. It shall be present if NAT is detected.
	PortNumber *int32 `mapstructure:"portNumber" json:"portNumber,omitempty"`
}

type EutraLocation struct {
	// Tracking Area Identity
	Tai Tai `mapstructure:"tai" json:"tai"`
	// E-UTRA Cell Identity
	Ecgi Ecgi `mapstructure:"ecgi" json:"ecgi"`
	// The value represents the elapsed time in minutes since the last network contact of the mobile station.Value "0" indicates that the location information was obtained after a successful paging procedure for Active Location Retrieval when the UE is in idle mode or after a successful NG-RAN location reporting procedure with the eNB when the UE is in connected mode.Any other value than "0" indicates that the location information is the last known one. See 3GPP TS 29.002 [21] clause 17.7.8.
	AgeOfLocationInformation *int32 `mapstructure:"ageOfLocationInformation" json:"ageOfLocationInformation,omitempty"`
	// The value represents the UTC time when the UeLocation information was acquired.
	UeLocationTimestamp *time.Time `mapstructure:"ueLocationTimestamp" json:"ueLocationTimestamp,omitempty"`
	// Refer to geographical Information. See 3GPP TS 23.032 [23] clause 7.3.2. Only the description of an ellipsoid point with uncertainty circle is allowed to be used. Allowed characters are 0-9 and A-F;
	GeographicalInformation string `mapstructure:"geographicalInformation" json:"geographicalInformation,omitempty"`
	// Refers to Calling Geodetic Location. See ITU-T Recommendation Q.763 (1999) [24] clause 3.88.2. Only the description of an ellipsoid point with uncertainty circle is allowed to be used. Allowed characters are 0-9 and A-F.
	GeodeticInformation string `mapstructure:"geodeticInformation" json:"geodeticInformation,omitempty"`
	// It indicates the global identity of the ng-eNodeB in which the UE is currently located. See  3GPP TS 38.413 [11] clause 9.3.1.8.
	GlobalNgenbId *GlobalRanNodeId `mapstructure:"globalNgenbId" json:"globalNgenbId,omitempty"`
}

type PresenceState = string

const (
	PresenceState_IN_AREA     PresenceState = "IN_AREA"
	PresenceState_OUT_OF_AREA PresenceState = "OUT_OF_AREA"
	PresenceState_UNKNOWN     PresenceState = "UNKNOWN"
	PresenceState_INACTIVE    PresenceState = "INACTIVE"
)

// This data type is defined in the same way as the "PresenceInfoRm" data type
type PresenceInfo struct {
	// Represents an identifier of the Presence Reporting Area (see clause 28.10 of 3GPP TS 23.003 [7]). This IE shall be present if the Area of Interest subscribed or reported is a Presence Reporting Area. When present, it shall be encoded as a string representing an integer in the following ranges:
	// 0 to 8 388 607 for UE-dedicated PRA; 8 388 608 to 16 777 215 for Core Network predefined PRA.
	// Examples: PRA ID 123 is encoded as "123". PRA ID 11 238 660 is encoded as "11238660"
	PraId *string `mapstructure:"praId" json:"praId,omitempty"`
	// Indicates whether the UE is inside or outside of the area of interest (e.g presence reporting area or the LADN area), or if the presence reporting area is inactive in the serving node.
	PresenceState *PresenceState `mapstructure:"presenceState" json:"presenceState,omitempty"`
	// Represents the list of tracking areas that constitutes the area. This IE shall be present if the subscription or the event report is for tracking UE presence in the tracking areas. For non 3GPP access the TAI shall be the N3GPP TAI.
	TrackingAreaList []Tai `mapstructure:"trackingAreaList" json:"trackingAreaList,omitempty"`
	// Represents the list of EUTRAN cell Ids that constitutes the area. This IE shall be present if the Area of Interest subscribed is a list of EUTRAN cell Ids.
	EcgiList []Ecgi `mapstructure:"ecgiList" json:"ecgiList,omitempty"`
	// Represents the list of NR cell Ids that constitutes the area. This IE shall be present if the Area of Interest subscribed is a list of NR cell Ids.
	NcgiList []Ncgi `mapstructure:"ncgiList" json:"ncgiList,omitempty"`
	// Represents the list of NG RAN node identifiers that constitutes the area. This IE shall be present if the Area of Interest subscribed is a list of NG RAN node identifiers.
	GlobalRanNodeIdList []GlobalRanNodeId `mapstructure:"globalRanNodeIdList" json:"globalRanNodeIdList,omitempty"`
}

// PresenceInfoRm
//
//	Purpose:
//	  Defines the PRA information
//
//	Data model:
//	  Please refer https://www.3gpp.org/ftp/Specs/archive/29_series/29.571/29571-g30.zip section 5.4.4.27
//
//	Usage:
//	  Used to define a map in StaticPcc.
type PresenceInfoRm struct {
	// Represents an identifier of the Presence Reporting Area (see clause 28.10 of 3GPP TS 23.003 [7]). This IE shall be present if the Area of Interest subscribed or reported is a Presence Reporting Area. When present, it shall be encoded as a string representing an integer in the following ranges:\n
	// 0 to 8 388 607 for UE-dedicated PRA; 8 388 608 to 16 777 215 for Core Network predefined PRA.\n
	// Examples: PRA ID 123 is encoded as "123". PRA ID 11 238 660 is encoded as "11238660".\n
	// Optional
	PraId string `mapstructure:"praId" json:"praId,omitempty"`
	// Indicates whether the UE is inside or outside of the area of interest (e.g presence reporting area or the LADN area), or if the presence reporting area is inactive in the serving node.\n
	// Optional
	PresenceState string `mapstructure:"presenceState" json:"presenceState,omitempty"`
	// Represents the list of tracking areas that constitutes the area. This IE shall be present if the subscription or the event report is for tracking UE presence in the tracking areas. For non 3GPP access the TAI shall be the N3GPP TAI.\n
	// Optional
	TrackingAreaList []Tai `mapstructure:"trackingAreaList" json:"trackingAreaList,omitempty"`
	// Represents the list of EUTRAN cell Ids that constitutes the area. This IE shall be present if the Area of Interest subscribed is a list of EUTRAN cell Ids.\n
	// Optional
	EcgiList []Ecgi `mapstructure:"ecgiList" json:"ecgiList,omitempty"`
	// Represents the list of NR cell Ids that constitutes the area. This IE shall be present if the Area of Interest subscribed is a list of NR cell Ids.\n
	// Optional
	NcgiList []Ncgi `mapstructure:"ncgiList" json:"ncgiList,omitempty"`
	// Represents the list of NG RAN node identifiers that constitutes the area. This IE shall be present if the Area of Interest subscribed is a list of NG RAN node identifiers.\n
	// Optional
	GlobalRanNodeIdList []GlobalRanNodeId `mapstructure:"globalRanNodeIdList" json:"globalRanNodeIdList,omitempty"`
}

type UserLocation struct {
	// E-UTRA user location
	EutraLocation *EutraLocation `mapstructure:"eutraLocation" json:"eutraLocation,omitempty"`
	// NR user location
	NrLocation *NrLocation `mapstructure:"nrLocation" json:"nrLocation,omitempty"`
	// Non-3GPP access user location
	N3gaLocation *N3gaLocation `mapstructure:"n3gaLocation" json:"n3gaLocation,omitempty"`
}

type RatType string

const (
	//common
	RatType_NR      RatType = "NR"
	RatType_WLAN    RatType = "WLAN"
	RatType_LTE_M   RatType = "LTE-M"
	RatType_VIRTUAL RatType = "VIRTUAL"
	//for 5g
	RatType_EUTRA          RatType = "EUTRA"
	RatType_NBIOT          RatType = "NBIOT"
	RatType_WIRELINE       RatType = "WIRELINE"
	RatType_WIRELINE_CABLE RatType = "WIRELINE_CABLE"
	RatType_WIRELINE_DSL   RatType = "WIRELINE_DSL"
	RatType_WIRELINE_PON   RatType = "WIRELINE_PON"
	RatType_NR_U           RatType = "NR_U"
	RatType_EUTRA_U        RatType = "EUTRA_U"
	RatType_TRUSTED_N3GA   RatType = "TRUSTED_N3GA"
	RatType_TRUSTED_WLAN   RatType = "TRUSTED_WLAN"
	RatType_UTRA           RatType = "UTRA"
	RatType_GERA           RatType = "GERA"
	//for 4g
	RatRype_UTRAN          RatType = "UTRAN"
	RatRype_GERAN          RatType = "GERAN"
	RatRype_GAN            RatType = "GAN"
	RatRype_HSPA_EVOLUTION RatType = "HSPA-EVOLUTION"
	RatRype_EUTRAN         RatType = "EUTRAN"
	RatType_EUTRAN_NB_IOT  RatType = "EUTRAN-NB-IoT"
)
