// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pfcp_node_msg.proto

package svc

import (
	context "context"
	fmt "fmt"
	math "math"

	"google.golang.org/protobuf/reflect/protoreflect"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// ======================= pfcp node message definitions =========================
type HelloReq struct {
	Hello                string   `protobuf:"bytes,1,opt,name=hello,proto3" json:"hello,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloReq) ProtoReflect() protoreflect.Message {
	//TODO implement me
	panic("implement me")
}

func (m *HelloReq) Reset()         { *m = HelloReq{} }
func (m *HelloReq) String() string { return proto.CompactTextString(m) }
func (*HelloReq) ProtoMessage()    {}
func (*HelloReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dbdfe9186184fc5, []int{0}
}

func (m *HelloReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloReq.Unmarshal(m, b)
}
func (m *HelloReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloReq.Marshal(b, m, deterministic)
}
func (m *HelloReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloReq.Merge(m, src)
}
func (m *HelloReq) XXX_Size() int {
	return xxx_messageInfo_HelloReq.Size(m)
}
func (m *HelloReq) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloReq.DiscardUnknown(m)
}

var xxx_messageInfo_HelloReq proto.InternalMessageInfo

func (m *HelloReq) GetHello() string {
	if m != nil {
		return m.Hello
	}
	return ""
}

type HelloRsp struct {
	Hello                string   `protobuf:"bytes,1,opt,name=hello,proto3" json:"hello,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloRsp) Reset()         { *m = HelloRsp{} }
func (m *HelloRsp) String() string { return proto.CompactTextString(m) }
func (*HelloRsp) ProtoMessage()    {}
func (*HelloRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dbdfe9186184fc5, []int{1}
}

func (m *HelloRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloRsp.Unmarshal(m, b)
}
func (m *HelloRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloRsp.Marshal(b, m, deterministic)
}
func (m *HelloRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloRsp.Merge(m, src)
}
func (m *HelloRsp) XXX_Size() int {
	return xxx_messageInfo_HelloRsp.Size(m)
}
func (m *HelloRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloRsp.DiscardUnknown(m)
}

var xxx_messageInfo_HelloRsp proto.InternalMessageInfo

func (m *HelloRsp) GetHello() string {
	if m != nil {
		return m.Hello
	}
	return ""
}

type NodeMsgHdr struct {
	UpfIp                []byte   `protobuf:"bytes,1,opt,name=upf_ip,json=upfIp,proto3" json:"upf_ip,omitempty"`
	UpfPort              uint32   `protobuf:"varint,2,opt,name=upf_port,json=upfPort,proto3" json:"upf_port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeMsgHdr) Reset()         { *m = NodeMsgHdr{} }
func (m *NodeMsgHdr) String() string { return proto.CompactTextString(m) }
func (*NodeMsgHdr) ProtoMessage()    {}
func (*NodeMsgHdr) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dbdfe9186184fc5, []int{2}
}

func (m *NodeMsgHdr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeMsgHdr.Unmarshal(m, b)
}
func (m *NodeMsgHdr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeMsgHdr.Marshal(b, m, deterministic)
}
func (m *NodeMsgHdr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeMsgHdr.Merge(m, src)
}
func (m *NodeMsgHdr) XXX_Size() int {
	return xxx_messageInfo_NodeMsgHdr.Size(m)
}
func (m *NodeMsgHdr) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeMsgHdr.DiscardUnknown(m)
}

var xxx_messageInfo_NodeMsgHdr proto.InternalMessageInfo

func (m *NodeMsgHdr) GetUpfIp() []byte {
	if m != nil {
		return m.UpfIp
	}
	return nil
}

func (m *NodeMsgHdr) GetUpfPort() uint32 {
	if m != nil {
		return m.UpfPort
	}
	return 0
}

type NodeMsgReq struct {
	Hdr *NodeMsgHdr `protobuf:"bytes,1,opt,name=hdr,proto3" json:"hdr,omitempty"`
	// encoded pfcp node msg request
	Msg                  []byte   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeMsgReq) Reset()         { *m = NodeMsgReq{} }
func (m *NodeMsgReq) String() string { return proto.CompactTextString(m) }
func (*NodeMsgReq) ProtoMessage()    {}
func (*NodeMsgReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dbdfe9186184fc5, []int{3}
}

func (m *NodeMsgReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeMsgReq.Unmarshal(m, b)
}
func (m *NodeMsgReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeMsgReq.Marshal(b, m, deterministic)
}
func (m *NodeMsgReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeMsgReq.Merge(m, src)
}
func (m *NodeMsgReq) XXX_Size() int {
	return xxx_messageInfo_NodeMsgReq.Size(m)
}
func (m *NodeMsgReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeMsgReq.DiscardUnknown(m)
}

var xxx_messageInfo_NodeMsgReq proto.InternalMessageInfo

func (m *NodeMsgReq) GetHdr() *NodeMsgHdr {
	if m != nil {
		return m.Hdr
	}
	return nil
}

func (m *NodeMsgReq) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

type NodeMsgRsp struct {
	// encoded pfcp node msg response
	Msg                  []byte   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeMsgRsp) Reset()         { *m = NodeMsgRsp{} }
func (m *NodeMsgRsp) String() string { return proto.CompactTextString(m) }
func (*NodeMsgRsp) ProtoMessage()    {}
func (*NodeMsgRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dbdfe9186184fc5, []int{4}
}

func (m *NodeMsgRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeMsgRsp.Unmarshal(m, b)
}
func (m *NodeMsgRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeMsgRsp.Marshal(b, m, deterministic)
}
func (m *NodeMsgRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeMsgRsp.Merge(m, src)
}
func (m *NodeMsgRsp) XXX_Size() int {
	return xxx_messageInfo_NodeMsgRsp.Size(m)
}
func (m *NodeMsgRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeMsgRsp.DiscardUnknown(m)
}

var xxx_messageInfo_NodeMsgRsp proto.InternalMessageInfo

func (m *NodeMsgRsp) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

func init() {
	proto.RegisterType((*HelloReq)(nil), "svc.hello_req")
	proto.RegisterType((*HelloRsp)(nil), "svc.hello_rsp")
	proto.RegisterType((*NodeMsgHdr)(nil), "svc.node_msg_hdr")
	proto.RegisterType((*NodeMsgReq)(nil), "svc.node_msg_req")
	proto.RegisterType((*NodeMsgRsp)(nil), "svc.node_msg_rsp")
}

func init() { proto.RegisterFile("pfcp_node_msg.proto", fileDescriptor_4dbdfe9186184fc5) }

var fileDescriptor_4dbdfe9186184fc5 = []byte{
	// 244 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x50, 0x3d, 0x4f, 0xc3, 0x30,
	0x10, 0x25, 0x44, 0x2d, 0xf4, 0x1a, 0xbe, 0x0e, 0x90, 0x0a, 0x53, 0x08, 0x4b, 0x59, 0x32, 0x94,
	0x89, 0x8d, 0x85, 0x81, 0x01, 0x54, 0xf9, 0x0f, 0x58, 0x22, 0xb1, 0x1d, 0xa4, 0x06, 0x1f, 0xbe,
	0xb8, 0xbf, 0x1f, 0xd9, 0xd0, 0xca, 0x54, 0xea, 0xe6, 0x77, 0x7e, 0x1f, 0x77, 0x0f, 0x2e, 0x49,
	0x37, 0x24, 0xbf, 0x6c, 0xab, 0x64, 0xcf, 0xa6, 0x26, 0x67, 0x07, 0x8b, 0x39, 0xaf, 0x9b, 0xea,
	0x0e, 0x26, 0x9d, 0x5a, 0xad, 0xac, 0x74, 0xea, 0x1b, 0xaf, 0x60, 0x14, 0xc1, 0x2c, 0x2b, 0xb3,
	0xf9, 0x44, 0xfc, 0x82, 0x84, 0xc2, 0xb4, 0x87, 0xf2, 0x0c, 0xc5, 0xc6, 0x5c, 0x76, 0xad, 0xc3,
	0x6b, 0x18, 0x7b, 0xd2, 0xf2, 0x93, 0x22, 0xad, 0x10, 0x23, 0x4f, 0xfa, 0x95, 0xf0, 0x06, 0x8e,
	0xc3, 0x98, 0xac, 0x1b, 0x66, 0x87, 0x65, 0x36, 0x3f, 0x11, 0x47, 0x9e, 0xf4, 0xd2, 0xba, 0xa1,
	0x7a, 0x49, 0x1c, 0xc2, 0x2a, 0xf7, 0x90, 0x77, 0xad, 0x8b, 0xf2, 0xe9, 0xe2, 0xa2, 0xe6, 0x75,
	0x53, 0xa7, 0x09, 0x22, 0xfc, 0xe2, 0x39, 0xe4, 0x3d, 0x9b, 0x68, 0x55, 0x88, 0xf0, 0xac, 0xca,
	0xd4, 0x86, 0x69, 0xc3, 0xc8, 0xb6, 0x8c, 0x05, 0xc3, 0x74, 0xa9, 0x1b, 0x7a, 0xb7, 0xad, 0x7a,
	0x63, 0x83, 0x0f, 0x7f, 0xf7, 0xe0, 0x69, 0xcc, 0xd8, 0x76, 0x71, 0xfb, 0x0f, 0x33, 0x55, 0x07,
	0xf8, 0x04, 0x67, 0xb1, 0x46, 0x4f, 0xba, 0x37, 0x2e, 0x44, 0xe0, 0xce, 0x62, 0x41, 0xb7, 0x3b,
	0x0a, 0xd2, 0x8f, 0x71, 0x6c, 0xfc, 0xf1, 0x27, 0x00, 0x00, 0xff, 0xff, 0x20, 0x44, 0xbc, 0x53,
	0x88, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PfcpNodeMsgClient is the client API for PfcpNodeMsg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PfcpNodeMsgClient interface {
	//  sending Hello message
	Hello(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloRsp, error)
	PfcpUpfmgrMsg(ctx context.Context, in *NodeMsgReq, opts ...grpc.CallOption) (*NodeMsgRsp, error)
}

type pfcpNodeMsgClient struct {
	cc *grpc.ClientConn
}

func NewPfcpNodeMsgClient(cc *grpc.ClientConn) PfcpNodeMsgClient {
	return &pfcpNodeMsgClient{cc}
}

func (c *pfcpNodeMsgClient) Hello(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloRsp, error) {
	out := new(HelloRsp)
	err := c.cc.Invoke(ctx, "/svc.PfcpNodeMsg/hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pfcpNodeMsgClient) PfcpUpfmgrMsg(ctx context.Context, in *NodeMsgReq, opts ...grpc.CallOption) (*NodeMsgRsp, error) {
	out := new(NodeMsgRsp)
	err := c.cc.Invoke(ctx, "/svc.PfcpNodeMsg/pfcp_upfmgr_msg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PfcpNodeMsgServer is the server API for PfcpNodeMsg service.
type PfcpNodeMsgServer interface {
	//  sending Hello message
	Hello(context.Context, *HelloReq) (*HelloRsp, error)
	PfcpUpfmgrMsg(context.Context, *NodeMsgReq) (*NodeMsgRsp, error)
}

// UnimplementedPfcpNodeMsgServer can be embedded to have forward compatible implementations.
type UnimplementedPfcpNodeMsgServer struct {
}

func (*UnimplementedPfcpNodeMsgServer) Hello(ctx context.Context, req *HelloReq) (*HelloRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (*UnimplementedPfcpNodeMsgServer) PfcpUpfmgrMsg(ctx context.Context, req *NodeMsgReq) (*NodeMsgRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PfcpUpfmgrMsg not implemented")
}

func RegisterPfcpNodeMsgServer(s *grpc.Server, srv PfcpNodeMsgServer) {
	s.RegisterService(&_PfcpNodeMsg_serviceDesc, srv)
}

func _PfcpNodeMsg_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PfcpNodeMsgServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svc.PfcpNodeMsg/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PfcpNodeMsgServer).Hello(ctx, req.(*HelloReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PfcpNodeMsg_PfcpUpfmgrMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PfcpNodeMsgServer).PfcpUpfmgrMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svc.PfcpNodeMsg/PfcpUpfmgrMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PfcpNodeMsgServer).PfcpUpfmgrMsg(ctx, req.(*NodeMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _PfcpNodeMsg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "svc.PfcpNodeMsg",
	HandlerType: (*PfcpNodeMsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "hello",
			Handler:    _PfcpNodeMsg_Hello_Handler,
		},
		{
			MethodName: "pfcp_upfmgr_msg",
			Handler:    _PfcpNodeMsg_PfcpUpfmgrMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pfcp_node_msg.proto",
}
